using System;

namespace Ili9341Driver
{
    public class StandardFixedWidthFont : Font
    {
        private byte _characterWidth = 8;
        private byte _characterHeight = 8;
        static readonly byte[][] font8x8_basic = {
                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //U+0020 ( )
                new byte[] { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 }, //U+0021 (!)
                new byte[] { 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //U+0022 (")
                new byte[] { 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00 }, //U+0023 (#)
                new byte[] { 0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00 }, //U+0024 ($)
                new byte[] { 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00 }, //U+0025 (%)
                new byte[] { 0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00 }, //U+0026 (&)
                new byte[] { 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00 }, //U+0027 (')
                new byte[] { 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00 }, //U+0028 (()
                new byte[] { 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00 }, //U+0029 ())
                new byte[] { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 }, //U+002A (*)
                new byte[] { 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00 }, //U+002B (+)
                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60 }, //U+002C (,)
                new byte[] { 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00 }, //U+002D (-)
                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00 }, //U+002E (.)
                new byte[] { 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00 }, //U+002F (/)
                new byte[] { 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00 }, //U+0030 (0)
                new byte[] { 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00 }, //U+0031 (1)
                new byte[] { 0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00 }, //U+0032 (2)
                new byte[] { 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00 }, //U+0033 (3)
                new byte[] { 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00 }, //U+0034 (4)
                new byte[] { 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00 }, //U+0035 (5)
                new byte[] { 0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00 }, //U+0036 (6)
                new byte[] { 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00 }, //U+0037 (7)
                new byte[] { 0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00 }, //U+0038 (8)
                new byte[] { 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00 }, //U+0039 (9)
                new byte[] { 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00 }, //U+003A (:)
                new byte[] { 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60 }, //U+003B (;)
                new byte[] { 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00 }, //U+003C (<)
                new byte[] { 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00 }, //U+003D (=)
                new byte[] { 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00 }, //U+003E (>)
                new byte[] { 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00 }, //U+003F (?)
                new byte[] { 0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00 }, //U+0040 (@)
                new byte[] { 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00 }, //U+0041 (A)
                new byte[] { 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00 }, //U+0042 (B)
                new byte[] { 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00 }, //U+0043 (C)
                new byte[] { 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00 }, //U+0044 (D)
                new byte[] { 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00 }, //U+0045 (E)
                new byte[] { 0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00 }, //U+0046 (F)
                new byte[] { 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00 }, //U+0047 (G)
                new byte[] { 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00 }, //U+0048 (H)
                new byte[] { 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 }, //U+0049 (I)
                new byte[] { 0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00 }, //U+004A (J)
                new byte[] { 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00 }, //U+004B (K)
                new byte[] { 0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00 }, //U+004C (L)
                new byte[] { 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00 }, //U+004D (M)
                new byte[] { 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00 }, //U+004E (N)
                new byte[] { 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00 }, //U+004F (O)
                new byte[] { 0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00 }, //U+0050 (P)
                new byte[] { 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00 }, //U+0051 (Q)
                new byte[] { 0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00 }, //U+0052 (R)
                new byte[] { 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00 }, //U+0053 (S)
                new byte[] { 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 }, //U+0054 (T)
                new byte[] { 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00 }, //U+0055 (U)
                new byte[] { 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00 }, //U+0056 (V)
                new byte[] { 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00 }, //U+0057 (W)
                new byte[] { 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00 }, //U+0058 (X)
                new byte[] { 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00 }, //U+0059 (Y)
                new byte[] { 0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00 }, //U+005A (Z)
                new byte[] { 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00 }, //U+005B ([)
                new byte[] { 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00 }, //U+005C (\)
                new byte[] { 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00 }, //U+005D (])
                new byte[] { 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00 }, //U+005E (^)
                new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF }, //U+005F (_)
                new byte[] { 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 }, //U+0060 (`)
                new byte[] { 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00 }, //U+0061 (a)
                new byte[] { 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00 }, //U+0062 (b)
                new byte[] { 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00 }, //U+0063 (c)
                new byte[] { 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00 }, //U+0064 (d)
                new byte[] { 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00 }, //U+0065 (e)
                new byte[] { 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00 }, //U+0066 (f)
                new byte[] { 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8 }, //U+0067 (g)
                new byte[] { 0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00 }, //U+0068 (h)
                new byte[] { 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00 }, //U+0069 (i)
                new byte[] { 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78 }, //U+006A (j)
                new byte[] { 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00 }, //U+006B (k)
                new byte[] { 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00 }, //U+006C (l)
                new byte[] { 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00 }, //U+006D (m)
                new byte[] { 0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00 }, //U+006E (n)
                new byte[] { 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00 }, //U+006F (o)
                new byte[] { 0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0 }, //U+0070 (p)
                new byte[] { 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E }, //U+0071 (q)
                new byte[] { 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00 }, //U+0072 (r)
                new byte[] { 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00 }, //U+0073 (s)
                new byte[] { 0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00 }, //U+0074 (t)
                new byte[] { 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00 }, //U+0075 (u)
                new byte[] { 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00 }, //U+0076 (v)
                new byte[] { 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00 }, //U+0077 (w)
                new byte[] { 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00 }, //U+0078 (x)
                new byte[] { 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8 }, //U+0079 (y)
                new byte[] { 0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00 }, //U+007A (z)
                new byte[] { 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00 }, //U+007B ({)
                new byte[] { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 }, //U+007C (|)
                new byte[] { 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00 }, //U+007D (})
                new byte[] { 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }  //U+007E (~)
                                        };

        public override FontCharacter GetFontData(char character)
        {
            if (character < 32 || character > 127)
            {
                character = '?';
            }

            var result = new FontCharacter
            {
                Data = font8x8_basic[character - 32],
                Width = _characterWidth,
                Height = _characterHeight,
                Space = 1
            };

            return result;
        }

        public override byte SpaceWidth
        {
            get { return 8; }
        }
    }
}

